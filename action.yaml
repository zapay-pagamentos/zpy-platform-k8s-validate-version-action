name: 'Validate Version'
description: 'Validate version'
inputs:
  python-version:
    description: 'Python version'
    required: true
  pypi-user:
    description: 'PyPi user'
    required: true
  pypi-password:
    description: 'PyPi password'
    required: true
outputs:
  imageTag: 
    description: "Image TAG"
    value: ${{ steps.validate_pr.outputs.image-tag }}
  versionCandidate:
    description: "New Semantic Version"
    value: ${{ steps.validate_pr.outputs.new-version }}
runs:
  using: "composite"
  steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Prepare Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: /opt/hostedtoolcache/Python/${{ inputs.python-version }}/x64/
        key: python${{ inputs.python-version }}-${{ runner.os }}-requirements-${{ hashFiles('requirements.txt') }}
    - name: Install Poetry
      env:
        PYPI_USER: ${{ inputs.pypi-user }}
        PYPI_PASSWORD: ${{ inputs.pypi-password }}
      shell: bash
      run: |
        pip install poetry
        poetry config http-basic.zapay-pypi $PYPI_USER $PYPI_PASSWORD
    - name: Validate pull request name
      id: validate_pr
      env:
        release_name: ${{ github.event.pull_request.title }}
      shell: bash
      run: |
        check_package_version=$(git tag --list --sort=-version:refname | head -n 1)
        if [ $check_package_version = "staging" ]; then 
          package_version=$(git tag --list --sort=-version:refname | sed -n 2p) 
        else
          package_version=$(git tag --list --sort=-version:refname | head -n 1)
        fi
        echo "package version -> $package_version"
        poetry version $package_version
        new_version_name=$(echo $release_name | grep -oP "((M|m){1}ajor)|((M|m){1}inor)|((P|p){1}atch)" | tr '[:upper:]' '[:lower:]')
        if [ ! -z "$new_version_name" ]; then
          VERSION=$package_version
          # Divida a versão em partes
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Verifique qual parte incrementar
          case "$1" in
            patch)
              PATCH=$((PATCH + 1))
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            *)
              echo "Tipo desconhecido: $1"
              exit 1
              ;;
          esac
          
          # Monte a nova versão
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          # Atualize o arquivo de versão ou crie um novo commit
          echo "$NEW_VERSION" > VERSION
          new_version=$NEW_VERSION
          branch_name=${{ github.head_ref }}
          image_tag=$(echo $branch_name | sed 's/\//_/g')
          echo "image-tag=$image_tag" >> $GITHUB_OUTPUT
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
        else
            echo "Título do pull request deve finalizar com (Major), (Minor) ou (Patch)" >&2
            exit 1
        fi
